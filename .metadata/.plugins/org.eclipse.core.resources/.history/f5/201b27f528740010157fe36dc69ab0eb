package hangman;
//private static final Logger logger = LoggerFactory.getLogger(HangmanGame.class); // SLF4J + Logback or Log4j2

import java.util.Arrays;


public class HangmanGame {
		
	// Field ---------------------------
	Status status;
	char[] currentWord;
	String targetWord;
	int life;
	String category;
	
	public HangmanGame(int categoryNum) {
		
		// 0. targetWord 초기화하기
		WordProvider wordprovider = new WordProvider();
		this.category = wordprovider.getCategoryName(categoryNum);
		this.targetWord = wordprovider.getRandomWord(categoryNum);
		
		// 1. status, life, currentWord 초기화하기
		this.status = Status.IN_PROGRESS;
		this.life = 6;
        this.currentWord = new char[targetWord.length()];
        Arrays.fill(this.currentWord, '_');
	}

	// Method ------------------------
	
	/**
	 * start() - 게임 스테이지에 진입 후 반복하는 메서드입니다.
	 */
	public void start() {
		
		Display display = new Display();
		InputHandler inputhandler = new InputHandler();
		
		do {
			// 1. display에게 출력 요청
			display.showGameScreen(this.life, this.currentWord, this.category);
			
			// 2. 사용자로부터 알파벳 입력 받기
			char inputLetter = inputhandler.inputLetter();
			
			// 3. 사용자가 입력한 알파벳을 갖고 검사하기
			// 4. 검사 결과를 바탕으로 status, life 갱신하기
			guessLetter(inputLetter);
						
			
		// 5. 갱신된 status와 life에 따라서 while 조건문 처리
		}while(this.status.equals(status.IN_PROGRESS)); 
		
		if(this.status.equals(status.FAIL)) { // status.FAIL인 경우
			// 실패 출력문
			display.showGameOver(this.targetWord);
			
		}else { // status.SUCCESS인 경우
			// 성공 출력문
			display.showMessage("성공 ~ 오 잘하네 ~ !");
		}

	}
	
	/**
	 * guessLetter() - 사용자로부터 입력받은 알파벳을 받아서, 정답에 포함되는지 확인하는 메서드
	 * @param inputLetter
	 */
	public void guessLetter(char inputLetter) {
		boolean found = false;
		
		// 포함되는 알파벳 모두 찾기
		for (int i = 0; i < targetWord.length(); i++) {
			if (targetWord.charAt(i) == inputLetter) {
				currentWord[i] = inputLetter;
				found = true;
			}
		}
		
		if (found) {
			//logger.info("✅ 입력한 알파벳 '{}'은(는) 단어에 포함되어 있습니다.", inputLetter);
		} else {
			//logger.info("❌ 입력한 알파벳 '{}'은(는) 단어에 포함되어 있지 않습니다.", inputLetter);
			this.life -= 1;
		}
		
		// status 갱신하기
		if(this.life <= 0) { 
			this.status = status.FAIL;
		}else{
			if(String.valueOf(this.currentWord).equals(targetWord)) {
				this.status = status.SUCCESS;
			}else {
				this.status = status.IN_PROGRESS;
			}
		}
	}
	
	/**
	 * getTargetWord() - 정답 반환하기
	 * @return
	 */
	public String getTargetWord() {
		return this.targetWord;
	}
	
	
	/**
	 * getStatus() - status 반환하기
	 * @return
	 */
	public Status getStatus() {
		return this.status;
	}
	
	/**
	 * getCurrentWord() - currentWord 반환하기
	 * @return
	 */
	public char[] getCurrentWord() {
		return this.currentWord;
	}
	

}
